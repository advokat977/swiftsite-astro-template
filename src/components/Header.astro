---
import { SITE, FEATURES } from "../../swiftsite.config";

const links = [
  { href: "/", label: "Home" },
  FEATURES.gallery && { href: "/gallery", label: "Gallery" },
  FEATURES.blog && { href: "/insights", label: "Insights" },
  { href: "/thanks", label: "Thanks" },
].filter(Boolean);
---
<header class="shell">
  <div class="container bar">
    <div class="brand">
      <a href="/"><strong>{SITE.title}</strong></a>
    </div>

    <nav class="nav">
      {links.map((l:any) => <a href={l.href}>{l.label}</a>)}
    </nav>

    <div class="actions">
      <button class="toggle" aria-label="Toggle theme" title="Toggle theme">🌙</button>
      <button class="burger" aria-label="Menu" aria-expanded="false" title="Menu">☰</button>
    </div>
  </div>
</header>

<nav class="drawer" hidden>
  <div class="container drawer-inner">
    {links.map((l:any) => <a href={l.href}>{l.label}</a>)}
  </div>
</nav>

<script>
  // Drawer
  const burger = document.querySelector(".burger");
  const drawer = document.querySelector(".drawer");
  burger?.addEventListener("click", () => {
    const open = !drawer?.hasAttribute("hidden");
    if (open) { drawer?.setAttribute("hidden",""); burger.setAttribute("aria-expanded","false"); }
    else { drawer?.removeAttribute("hidden"); burger.setAttribute("aria-expanded","true"); }
  });

  // Theme toggle
  const KEY = "swiftsite-theme";
  const btn = document.querySelector<HTMLButtonElement>(".toggle");
  function applyIcon(theme){ if(!btn) return; btn.textContent = theme === "dark" ? "☀️" : "🌙"; }
  function setTheme(theme){
    document.documentElement.setAttribute("data-theme", theme);
    try { localStorage.setItem(KEY, theme); } catch(_) {}
    applyIcon(theme);
  }
  // init icon prema trenutno postavljenoj temi (iz BaseLayout skripte)
  applyIcon(document.documentElement.getAttribute("data-theme") || "light");
  btn?.addEventListener("click", () => {
    const current = document.documentElement.getAttribute("data-theme") || "light";
    setTheme(current === "dark" ? "light" : "dark");
  });
</script>

<style>
.shell{
  position:sticky;top:0;z-index:50;
  backdrop-filter:saturate(160%) blur(8px);
  background:color-mix(in oklab, var(--bg) 85%, transparent);
  border-bottom:1px solid var(--border);
}
.bar{display:flex;align-items:center;justify-content:space-between;padding:14px 20px}
.nav{display:flex;gap:18px}
.nav a{color:var(--ink);text-decoration:none;border-bottom:2px solid transparent;padding-bottom:2px}
.nav a:hover{border-color:var(--ink)}
.actions{display:flex;gap:10px;align-items:center}
.toggle,.burger{
  background:#fff;border:1px solid var(--border);border-radius:10px;
  padding:8px 10px;line-height:1;cursor:pointer;font-size:16px;
}
:root[data-theme="dark"] .toggle,
:root[data-theme="dark"] .burger{
  background:#0f1521;border-color:#1c2330;color:var(--ink)
}
.drawer{background:var(--bg);border-bottom:1px solid var(--border)}
.drawer-inner{display:flex;flex-direction:column;gap:12px;padding:14px 20px}
@media (max-width: 880px){
  .nav{display:none}
  .burger{display:inline-block}
}
@media (min-width: 881px){
  .burger{display:none}
}
</style>
